// Mocks generated by Mockito 5.3.2 from annotations
// in ceiba/test/user_list_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i2;

import 'package:ceiba/infrastructure/http/http.data_source.dart' as _i6;
import 'package:ceiba/model/user/users.model.dart' as _i5;
import 'package:ceiba/ui/user/user.service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpClient_0 extends _i1.SmartFake implements _i2.HttpClient {
  _FakeHttpClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_1 extends _i1.SmartFake implements Uri {
  _FakeUri_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i3.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HttpClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeHttpClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.HttpClient);
  @override
  _i4.Future<List<_i5.User>> findAll() => (super.noSuchMethod(
        Invocation.method(
          #findAll,
          [],
        ),
        returnValue: _i4.Future<List<_i5.User>>.value(<_i5.User>[]),
      ) as _i4.Future<List<_i5.User>>);
  @override
  Uri baseUri({
    String? path,
    Map<String, String>? queryParams,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #baseUri,
          [],
          {
            #path: path,
            #queryParams: queryParams,
          },
        ),
        returnValue: _FakeUri_1(
          this,
          Invocation.method(
            #baseUri,
            [],
            {
              #path: path,
              #queryParams: queryParams,
            },
          ),
        ),
      ) as Uri);
  @override
  _i4.Future<List<X>> getList<X>(
    String? path,
    _i6.ItemCreator<X>? itemCreator, {
    Map<String, String>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getList,
          [
            path,
            itemCreator,
          ],
          {#queryParameters: queryParameters},
        ),
        returnValue: _i4.Future<List<X>>.value(<X>[]),
      ) as _i4.Future<List<X>>);
  @override
  _i4.Future<X> getItem<X>(
    String? path,
    _i6.ItemCreator<X>? itemCreator, {
    Map<String, String>? queryParameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getItem,
          [
            path,
            itemCreator,
          ],
          {#queryParameters: queryParameters},
        ),
        returnValue: _i4.Future<X>.value(null),
      ) as _i4.Future<X>);
}
